@page "/edit"
@using Microsoft.EntityFrameworkCore
@using WardrobeInventory.Models
@using WardrobeInventory.Enums
@inject IDbContextFactory<WardrobeInventory.Data.WardrobeInventoryContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>WardrobeItem</h2>
<hr />
@if (WardrobeItem is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="WardrobeItem" OnValidSubmit="UpdateWardrobeItem" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="WardrobeItem.Id" value="@WardrobeItem.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="WardrobeItem.Name" class="form-control" />
                    <ValidationMessage For="() => WardrobeItem.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="category" class="form-label">Category:</label>
                    <InputSelect id="category" @bind-Value="WardrobeItem.Category" class="form-control">
                        @foreach (var category in Enum.GetValues(typeof(ItemCategory)).Cast<ItemCategory>())
                        {
                            <option value="@category">@category.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => WardrobeItem.Category" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="brand" class="form-label">Brand:</label>
                    <InputText id="brand" @bind-Value="WardrobeItem.Brand" class="form-control" />
                    <ValidationMessage For="() => WardrobeItem.Brand" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="color" class="form-label">Color:</label>
                    <InputText id="color" @bind-Value="WardrobeItem.Color" class="form-control" />
                    <ValidationMessage For="() => WardrobeItem.Color" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="material" class="form-label">Material:</label>
                    <InputText id="material" @bind-Value="WardrobeItem.Material" class="form-control" />
                    <ValidationMessage For="() => WardrobeItem.Material" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="size" class="form-label">Size:</label>
                    <InputText id="size" @bind-Value="WardrobeItem.Size" class="form-control" />
                    <ValidationMessage For="() => WardrobeItem.Size" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="condition" class="form-label">Condition:</label>
                    <InputSelect id="condition" @bind-Value="WardrobeItem.Condition" class="form-control">
                        @foreach (var condition in Enum.GetValues(typeof(ItemCondition)).Cast<ItemCondition>())
                        {
                            <option value="@condition">@condition.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => WardrobeItem.Condition" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="storagelocation" class="form-label">StorageLocation:</label>
                    <InputText id="storagelocation" @bind-Value="WardrobeItem.StorageLocation" class="form-control" />
                    <ValidationMessage For="() => WardrobeItem.StorageLocation" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="WardrobeItem.Price" class="form-control" />
                    <ValidationMessage For="() => WardrobeItem.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="image" class="form-label">Upload Image:</label>
                    <InputFile id="image" OnChange="HandleFileUpload" multiple />
                </div>

                @if (ImagePreview != null)
                {
                    <img src="@ImagePreview" width="200" />
                }
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/">Back to List</a>
</div>

@code {
    private string? ImagePreview;
    private byte[]? UploadedFile;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private WardrobeItem? WardrobeItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        WardrobeItem ??= await context.WardrobeItem.FirstOrDefaultAsync(m => m.Id == Id);

        if (WardrobeItem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateWardrobeItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(WardrobeItem!).State = EntityState.Modified;


        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!WardrobeItemExists(WardrobeItem!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/");
    }

    private bool WardrobeItemExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.WardrobeItem.Any(e => e.Id == id);
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        UploadedFile = buffer;
        ImagePreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";

        if (WardrobeItem != null)
        {
            WardrobeItem.Image = UploadedFile;
            Console.WriteLine($"File uploaded: {UploadedFile.Length} bytes");
        }
    }
}
